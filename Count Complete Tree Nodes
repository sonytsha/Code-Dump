https://leetcode.com/problems/count-complete-tree-nodes/description/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int countNodes(TreeNode root) {
       if (root == null) {
            return 0;
        }
        // Count the current node
        int count = 1;
        // Recursively count the nodes in the left subtree and right subtree
        count += countNodes(root.left);
        count += countNodes(root.right);
        return count;
    }
}


Time Complexity (TC): 
𝑂
(
𝑛
)
O(n)
Space Complexity (SC): 
𝑂
(
ℎ
)
O(h), where 
ℎ
h is the height of the tree. This can be 
𝑂
(
log
⁡
𝑛
)
O(logn) for a balanced tree and 
𝑂
(
𝑛
)
O(n) for a skewed tree.
