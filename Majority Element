https://www.geeksforgeeks.org/problems/majority-element-1587115620/1?page=1&sortBy=submissions

1) sort the array and count the elements
TC : O(NlogN)
SC : O(logN)
class Solution
{
    static int majorityElement(int a[], int size)
    {
        // your code here
        Arrays.sort(a);
        int currentElement = a[0];
        int count = 1;
        for(int i=1;i<size;i++){
            if(a[i] == currentElement) { count++;
            } 
        else {
                // When element changes, check if the previous element was majority
                if (count > size / 2) {
                    return currentElement;
                }
                // Update to the new element and reset count
                currentElement = a[i];
                count = 1;
            }
        }

        // After the loop, perform a final check for the last element
        if (count > size / 2) {
            return currentElement;
        }

        // If no majority element was found
        return -1;
    }
}


2) The optimal solution for finding a majority element in an array that appears more than 
𝑁
/
2
N/2 times can be achieved using the Boyer-Moore Voting Algorithm. This algorithm operates in 
𝑂
(
𝑁
)
O(N) time complexity and 
𝑂
(
1
)
O(1) space complexity, making it highly efficient for this specific problem.

Here’s how the Boyer-Moore Voting Algorithm works:

First Pass: Identify a candidate that might be the majority element.
Second Pass: Verify that the candidate is indeed the majority element.

The Boyer-Moore Voting Algorithm leverages the idea of "voting" to identify a potential majority element. The core concept is to find a candidate that might be the majority and then verify if it truly appears more than 
𝑁
/
2
N/2 times.

Steps
Candidate Selection: Traverse the array, treating the task like a voting process where each element can either increase or reset the vote count. The candidate whose votes do not drop to zero by the end of the array is the potential majority.
Verification: Verify if this candidate is indeed the majority by counting its occurrences in the array.

class Solution {
    static int majorityElement(int[] nums, int size) {
        int candidate = -1, count = 0;

        // Candidate selection process
        for (int num : nums) {
            if (count == 0) {
                candidate = num;
                count = 1;
            } else if (num == candidate) {
                count++;
            } else {
                count--;
            }
        }

        // Verification process
        count = 0;
        for (int num : nums) {
            if (num == candidate) {
                count++;
            }
        }

        // Check if the verified candidate is indeed the majority
        return (count > size / 2) ? candidate : -1;
    }

    public static void main(String[] args) {
        int[] arr = {3, 1, 3, 3, 2};  // Example array
        System.out.println(majorityElement(arr, arr.length));  // Outputs: 3
    }
}
