class Solution {
    static boolean searchKey(int n, Node head, int key) {
        Node current = head; // Start from the head of the list
        
        while (current != null) { // Continue until the end of the list
            if (current.data == key) { // Check if the current node's data equals the key
                return true; // Key found, return true
            }
            current = current.next; // Move to the next node
        }
        
        return false; // Key not found in the list, return false
    }
}




Explanation:
Start from the Head: Begin the traversal from the head of the linked list.
Traversal:
Use a while loop to traverse through each node in the list (while (current != null)). This ensures that every node is checked.
Check Each Node:
Inside the loop, compare the data of the current node with the key (if (current.data == key)).
If they match, return true indicating that the key is found.
Move to Next Node:
If the current node's data isn't the key, move to the next node (current = current.next).
Complete the Search:
If the loop completes without finding the key, return false, indicating the key is not present in the linked list.
Performance:
Time Complexity: The time complexity is 
𝑂
(
𝑛
)
O(n), where 
𝑛
n is the number of nodes in the linked list. This is because, in the worst case, each node must be checked once.
Space Complexity: The space complexity is 
𝑂
(
1
)
O(1) as no extra space is used that grows with the input size; only one additional pointer (current) is utilized.
This solution is efficient and straightforward, adhering to the problem's constraints and requirements. It ensures that the presence of a key in the linked list is determined in a single traversal of the list.
