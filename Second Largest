https://www.geeksforgeeks.org/problems/second-largest3735/1?page=1&sortBy=submissions

class Solution {
    int print2largest(int arr[], int n) {
        // code here
        Arrays.sort(arr);
        return arr[n-2];
    }
} --- this will fail in duplicate cases

1) import java.util.Arrays;

class Solution {
    int print2largest(int arr[], int n) {
        if (n < 2) {
            // Edge case: not enough elements to determine a second largest
            return -1;
        }

        Arrays.sort(arr);

        // Find the second largest element
        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] != arr[n - 1]) {
                return arr[i];
            }
        }

        // If no distinct second largest element is found
        return -1;
    }
}


2) Approach
The idea is to maintain two variables:

first to store the largest value found so far.
second to store the second largest value found so far.
As you iterate through the array, you update these variables accordingly while ensuring that second is always less than first and is the largest possible value other than first.

TC : O(N)
SC : O(1)
class Solution {
    int print2largest(int arr[], int n) {
        // Edge case: If there are less than two elements, return -1
        if (n < 2) {
            return -1;
        }

        int first = Integer.MIN_VALUE;
        int second = Integer.MIN_VALUE;

        // Traverse the array
        for (int value : arr) {
            if (value > first) {
                // If current value is higher than the highest found so far
                second = first; // make the largest so far the second largest
                first = value;  // and update the largest
            } else if (value > second && value != first) {
                // If current value is less than the largest but greater than the second largest
                // and is not equal to the largest (ensuring it's unique)
                second = value; // update the second largest
            }
        }

        // After traversing the array, check if a valid second largest was found
        if (second == Integer.MIN_VALUE) {
            // If second largest wasn't updated from its initial value
            return -1; // no valid second largest element was found
        } else {
            return second; // return the second largest number
        }
    }
}
